[{"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/index.js":"1","/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/App.js":"2","/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/SunriseSunset.js":"3","/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/CurrentWeather.js":"4","/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/NineDaysForecast.js":"5","/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js":"6"},{"size":280,"mtime":1651468710327,"results":"7","hashOfConfig":"8"},{"size":586,"mtime":1651478742030,"results":"9","hashOfConfig":"8"},{"size":1208,"mtime":1651478293514,"results":"10","hashOfConfig":"8"},{"size":3016,"mtime":1651495042245,"results":"11","hashOfConfig":"8"},{"size":2068,"mtime":1651495045873,"results":"12","hashOfConfig":"8"},{"size":4272,"mtime":1651495075757,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1di3aun",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/index.js",[],[],[],"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/App.js",[],[],"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/SunriseSunset.js",[],[],"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/CurrentWeather.js",[],[],"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/NineDaysForecast.js",[],[],"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js",["34","35"],[],"import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ResponsiveLine } from '@nivo/line'\n\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n    const [loading, setloading] = useState(true);\n\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        setloading(false);\n        }, [props]);\n\n            \n        // push all sunrise time in a array \n        let sunriseStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunriseStat.push({\"x\":yearData?.[i]?.[0],\"y\":yearData?.[i]?.[1]})\n            };\n                \n        }, [yearData]);\n\n        // push all sunrise time in a array \n        let sunsetStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunsetStat.push({\"x\":yearData?.[i]?.[0],\"y\":yearData?.[i]?.[3]})\n            };\n        }, [yearData]);\n\n        const data = [\n                {\n                  \"id\": \"Sunrise\",\n                  \"color\": \"hsl(268, 70%, 50%)\",\n                  \"data\": sunriseStat\n                },\n                {\n                    \"id\": \"Sunset\",\n                    \"color\": \"hsl(331, 70%, 50%)\",\n                    \"data\": sunsetStat\n                  },\n            ]\n\n        \n        if (loading === true) { return (<p>loading...</p>)}\n\n        return (\n        <>\n            <ResponsiveLine\n                data={data}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{\n                    type: \"time\",\n                    format: \"%Y-%m-%d\",\n                    precision: 'day'\n                }}\n                xFormat=\"time:%Y-%m-%d\"\n                yScale={{\n                    type: \"linear\",\n                    min: \"auto\",\n                    max: \"auto\",\n                    format: \"%Hh%M [%d]\",\n                    stacked: false,\n                    reverse: false,\n                }}\n                yFormat=\"time:%Hh%M [%d]\"\n                curve=\"cardinal\"\n                axisTop={null}\n                axisRight={null}\n                axisLeft={{\n                orient: \"left\",\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: \"Time\",\n                legendOffset: -40,\n                legendPosition: \"middle\"\n                }}\n                axisBottom={{\n                format: \"%x\",\n                //tickValues: \"every 2 days\",\n                // tickRotation: -90,\n                legend: \"time scale\",\n                legendOffset: -12\n                }}\n                colors={{ scheme: \"nivo\" }}\n                pointSize={10}\n                pointColor={{ theme: \"background\" }}\n                pointBorderWidth={2}\n                pointBorderColor={{ from: \"serieColor\" }}\n                pointLabel=\"y\"\n                pointLabelYOffset={-12}\n                useMesh={true}\n                theme={{\n                    \"background\": \"rgba(194,194,194,0.5)\",}}\n                legends={[\n                {\n                    anchor: \"bottom-right\",\n                    direction: \"column\",\n                    justify: false,\n                    translateX: 100,\n                    translateY: 0,\n                    itemsSpacing: 0,\n                    itemDirection: \"left-to-right\",\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemOpacity: 0.75,\n                    symbolSize: 12,\n                    symbolShape: \"circle\",\n                    symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n                    effects: [\n                    {\n                        on: \"hover\",\n                        style: {\n                        itemBackground: \"rgba(0, 0, 0, .03)\",\n                        itemOpacity: 1\n                        }\n                    }\n                    ]\n                }\n                ]}\n            />   \n        </>)\n  \n}\n",{"ruleId":"36","severity":1,"message":"37","line":28,"column":12,"nodeType":"38","endLine":28,"endColumn":22,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"40","line":36,"column":12,"nodeType":"38","endLine":36,"endColumn":22,"suggestions":"41"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sunriseStat'. Either include it or remove the dependency array.","ArrayExpression",["42"],"React Hook useEffect has a missing dependency: 'sunsetStat'. Either include it or remove the dependency array.",["43"],{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Update the dependencies array to be: [sunriseStat, yearData]",{"range":"48","text":"49"},"Update the dependencies array to be: [sunsetStat, yearData]",{"range":"50","text":"51"},[928,938],"[sunriseStat, yearData]",[1205,1215],"[sunsetStat, yearData]"]