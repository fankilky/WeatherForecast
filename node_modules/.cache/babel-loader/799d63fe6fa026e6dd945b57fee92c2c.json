{"ast":null,"code":"var _jsxFileName = \"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { conditionalExpression } from \"@babel/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data);\n    });\n  }, [props]); // let sunriseStat = yearData.jsonarray.map(function(e) {\n  //     return e[0][1]\n  // })\n  // console.log(`sunriseStat`,sunriseStat)\n\n  useEffect(() => {\n    let dateLabel = [];\n\n    for (let i = 0; i < yearData.length; i++) {\n      dateLabel.push(yearData.data[i][0]);\n    }\n\n    ;\n    console.log(`dateLabel`, dateLabel);\n  }, [yearData]); // let sunriseData = yearData.data.map(e => ({\n  //     data: e,\n  //     time: \"label\"\n  // }));\n  // console.log(`sunriseData`,sunriseData);\n\n  ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunriseeeee'\n      }\n    }\n  };\n  console.log(`yearDatafield`, yearData.data[0]);\n  const labels = yearData.fields;\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Sunrise',\n      data: [12, 19, 3, 5, 2, 3],\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }, {\n      label: 'Sunset',\n      data: [14, 9, 3, 3, 2, 3],\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SearchSunriseSunset, \"eAUt0z17svk40LnlJNmfCVkg+Zw=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","conditionalExpression","SearchSunriseSunset","props","yearData","setYearData","year","Object","values","API","get","mode","then","response","data","dateLabel","i","length","push","console","log","register","options","responsive","plugins","legend","position","title","display","text","labels","fields","datasets","label","borderColor","backgroundColor"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Line } from 'react-chartjs-2';\nimport { conditionalExpression } from \"@babel/types\";\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data);\n            });\n        }, [props]);\n\n        // let sunriseStat = yearData.jsonarray.map(function(e) {\n        //     return e[0][1]\n        // })\n        // console.log(`sunriseStat`,sunriseStat)\n\n        useEffect(() => {\n            let dateLabel = [];\n            for (let i = 0; i < yearData.length; i++) {\n                dateLabel.push(yearData.data[i][0])\n            };\n            console.log(`dateLabel`,dateLabel)\n        }, [yearData]);\n            \n\n        // let sunriseData = yearData.data.map(e => ({\n        //     data: e,\n        //     time: \"label\"\n        // }));\n        // console.log(`sunriseData`,sunriseData);\n\n\n\n        ChartJS.register(\n            CategoryScale,\n            LinearScale,\n            PointElement,\n            LineElement,\n            Title,\n            Tooltip,\n            Legend\n          );\n\n       const options = {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              title: {\n                display: true,\n                text: 'Sunriseeeee',\n              },\n              \n            },\n          }\n\n          console.log(`yearDatafield`,yearData.data[0])\n          const labels = yearData.fields;\n\n        const data = {\n        labels,\n        datasets: [\n            {\n            label: 'Sunrise',\n            data: [12, 19, 3, 5, 2, 3],\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            },\n            {\n            label: 'Sunset',\n            data: [14, 9, 3, 3, 2, 3],\n            borderColor: 'rgb(53, 162, 235)',\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\n            },\n        ],\n        };\n        return (\n        <>\n            <Line options={options} data={data} />    \n        </>)\n  \n}"]},"metadata":{},"sourceType":"module"}