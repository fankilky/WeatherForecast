{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ResponsiveLine } from '@nivo/line';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  console.log(Object.values(props));\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data.data);\n    });\n  }, [props]);\n  let data = [];\n\n  for (var j = 0; j < yearData.length; j++) {\n    data.push({\n      date: yearData[j][0],\n      time: yearData[j][1]\n    });\n  }\n\n  console.log(yearData[0][0]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(SearchSunriseSunset, \"M/M4V4aROy+oDgwdMrMedD/vvKs=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","ResponsiveLine","SearchSunriseSunset","props","console","log","Object","values","yearData","setYearData","year","API","get","mode","then","response","data","j","length","push","date","time"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,YAA/B;;;AAGA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAE/CC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAZ;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,IAAI,GAAGJ,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAX;AACA,QAAIQ,GAAG,GAAI,kFAAiFD,IAAK,eAAjG;AACIZ,IAAAA,KAAK,CAACc,GAAN,CAAUD,GAAV,EAAe;AAACE,MAAAA,IAAI,EAAC;AAAN,KAAf,EAA8BC,IAA9B,CAAoCC,QAAD,IAAc;AAC7CN,MAAAA,WAAW,CAACM,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAX;AACH,KAFD;AAGH,GANI,EAMF,CAACb,KAAD,CANE,CAAT;AAQI,MAAIa,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,QAAQ,CAACU,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACtCD,IAAAA,IAAI,CAACG,IAAL,CAAU;AAACC,MAAAA,IAAI,EAAEZ,QAAQ,CAACS,CAAD,CAAR,CAAY,CAAZ,CAAP;AAAuBI,MAAAA,IAAI,EAAEb,QAAQ,CAACS,CAAD,CAAR,CAAY,CAAZ;AAA7B,KAAV;AACF;;AACDb,EAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAZ;AAGA,sBAAQ,qCAAR;AA2EP;;GAhGuBN,mB;;KAAAA,mB","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ResponsiveLine } from '@nivo/line'\n\n\nexport default function SearchSunriseSunset(props) {\n\n    console.log(Object.values(props))\n    const [yearData, setYearData] = useState(\"\")\n\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        }, [props]);\n\n        let data = [];\n        for(var j = 0; j < yearData.length; j++) {\n           data.push({date: yearData[j][0], time: yearData[j][1]});\n        }\n        console.log(yearData[0][0]);\n\n        \n        return (<>\n            {/* <ResponsiveLine\n            data={data}\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n            xScale={{\n            type: 'time',\n            format: '%Y-%m-%d',\n            useUTC: false,\n            precision: 'day',\n            }}\n            xFormat=\"time:%Y-%m-%d\"           \n            yScale={{\n                type: 'linear',\n                min: 'auto',\n                max: 'auto',\n                stacked: true,\n                reverse: false\n            }}\n            yFormat=\" >-.2f\"\n            curve=\"natural\"\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'transportation',\n                legendOffset: 36,\n                legendPosition: 'middle'\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'count',\n                legendOffset: -40,\n                legendPosition: 'middle'\n            }}\n            pointSize={10}\n            pointColor={{ theme: 'background' }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: 'serieColor' }}\n            pointLabelYOffset={-12}\n            useMesh={true}\n            legends={[\n                {\n                    anchor: 'bottom-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 100,\n                    translateY: 0,\n                    itemsSpacing: 0,\n                    itemDirection: 'left-to-right',\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemOpacity: 0.75,\n                    symbolSize: 12,\n                    symbolShape: 'circle',\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemBackground: 'rgba(0, 0, 0, .03)',\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                }\n            ]}\n        /> */}\n    </>)\n  \n}"]},"metadata":{},"sourceType":"module"}