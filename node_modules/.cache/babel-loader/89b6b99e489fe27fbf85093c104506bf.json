{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ResponsiveLine } from '@nivo/line';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data.data);\n    });\n  }, [props]); // let sunriseStat = yearData.jsonarray.map(function(e) {\n  //     return e[0][1]\n  // })\n  // console.log(`sunriseStat`,sunriseStat)\n\n  let sunriseData = [];\n\n  for (var i = 0; i < yearData.length; i++) {\n    sunriseData.push({\n      \"date\": yearData[j][0],\n      \"time\": yearData[j][1]\n    });\n  }\n\n  console.log(sunriseData);\n  console.log(`yearData`, yearData[0][0]); // let sunriseData = yearData.data.map(e => ({\n  //     data: e,\n  //     time: \"label\"\n  // }));\n  // console.log(`sunriseData`,sunriseData);\n\n  let data = [{\n    \"id\": \"Sunrise\",\n    \"color\": \"hsl(254, 70%, 50%)\",\n    \"data\": [{\n      \"date\": \"2020-01-01\",\n      \"y\": 131\n    }, {\n      \"date\": \"2020-01-02\",\n      \"y\": 177\n    }, {\n      \"date\": \"2020-01-03\",\n      \"y\": 236\n    }, {\n      \"date\": \"2020-01-04\",\n      \"y\": 120\n    }]\n  }, {\n    \"id\": \"Trans\",\n    \"color\": \"hsl(356, 70%, 50%)\",\n    \"data\": [{\n      \"date\": \"2020-01-01\",\n      \"y\": 49\n    }, {\n      \"date\": \"2020-01-02\",\n      \"y\": 54\n    }, {\n      \"date\": \"2020-01-03\",\n      \"y\": 54\n    }, {\n      \"date\": \"2020-01-04\",\n      \"y\": 35\n    }]\n  }, {\n    \"id\": \"Sunset\",\n    \"color\": \"hsl(45, 70%, 50%)\",\n    \"data\": [{\n      \"date\": \"2020-01-01\",\n      \"y\": 40\n    }, {\n      \"date\": \"2020-01-02\",\n      \"y\": 167\n    }, {\n      \"date\": \"2020-01-03\",\n      \"y\": 29\n    }, {\n      \"date\": \"2020-01-04\",\n      \"y\": 111\n    }]\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(SearchSunriseSunset, \"M/M4V4aROy+oDgwdMrMedD/vvKs=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","ResponsiveLine","SearchSunriseSunset","props","yearData","setYearData","year","Object","values","API","get","mode","then","response","data","sunriseData","i","length","push","j","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,YAA/B;;;AAGA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcL,KAAd,CAAX;AACA,QAAIM,GAAG,GAAI,kFAAiFH,IAAK,eAAjG;AACIR,IAAAA,KAAK,CAACY,GAAN,CAAUD,GAAV,EAAe;AAACE,MAAAA,IAAI,EAAC;AAAN,KAAf,EAA8BC,IAA9B,CAAoCC,QAAD,IAAc;AAC7CR,MAAAA,WAAW,CAACQ,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAX;AACH,KAFD;AAGH,GANI,EAMF,CAACX,KAAD,CANE,CAAT,CAH+C,CAW3C;AACA;AACA;AACA;;AAEA,MAAIY,WAAW,GAAG,EAAlB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,QAAQ,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCD,IAAAA,WAAW,CAACG,IAAZ,CAAiB;AAAC,cAAQd,QAAQ,CAACe,CAAD,CAAR,CAAY,CAAZ,CAAT;AAAyB,cAAQf,QAAQ,CAACe,CAAD,CAAR,CAAY,CAAZ;AAAjC,KAAjB;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAa,UAAb,EAAuBjB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAvB,EArB2C,CAuB3C;AACA;AACA;AACA;AACA;;AACA,MAAIU,IAAI,GAAE,CACN;AACE,UAAM,SADR;AAEE,aAAS,oBAFX;AAGE,YAAQ,CACN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KADM,EAKN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KALM,EASN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KATM,EAaN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KAbM;AAHV,GADM,EAuBN;AACE,UAAM,OADR;AAEE,aAAS,oBAFX;AAGE,YAAQ,CACN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KADM,EAKN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KALM,EASN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KATM,EAaN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KAbM;AAHV,GAvBM,EA4CN;AACE,UAAM,QADR;AAEE,aAAS,mBAFX;AAGE,YAAQ,CACN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KADM,EAKN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KALM,EASN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KATM,EAaN;AACE,cAAQ,YADV;AAEE,WAAK;AAFP,KAbM;AAHV,GA5CM,CAAV;AAmEA,sBAAQ,qCAAR;AAoEP;;GAnKuBZ,mB;;KAAAA,mB","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ResponsiveLine } from '@nivo/line'\n\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        }, [props]);\n\n        // let sunriseStat = yearData.jsonarray.map(function(e) {\n        //     return e[0][1]\n        // })\n        // console.log(`sunriseStat`,sunriseStat)\n\n        let sunriseData = [];\n        for(var i = 0; i < yearData.length; i++) {\n            sunriseData.push({\"date\": yearData[j][0], \"time\": yearData[j][1]});\n        }\n        console.log(sunriseData);\n        console.log(`yearData`,yearData[0][0]);\n\n        // let sunriseData = yearData.data.map(e => ({\n        //     data: e,\n        //     time: \"label\"\n        // }));\n        // console.log(`sunriseData`,sunriseData);\n        let data= [\n            {\n              \"id\": \"Sunrise\",\n              \"color\": \"hsl(254, 70%, 50%)\",\n              \"data\": [\n                {\n                  \"date\": \"2020-01-01\",\n                  \"y\": 131\n                },\n                {\n                  \"date\": \"2020-01-02\",\n                  \"y\": 177\n                },\n                {\n                  \"date\": \"2020-01-03\",\n                  \"y\": 236\n                },\n                {\n                  \"date\": \"2020-01-04\",\n                  \"y\": 120\n                },\n              ]\n            },\n            {\n              \"id\": \"Trans\",\n              \"color\": \"hsl(356, 70%, 50%)\",\n              \"data\": [\n                {\n                  \"date\": \"2020-01-01\",\n                  \"y\": 49\n                },\n                {\n                  \"date\": \"2020-01-02\",\n                  \"y\": 54\n                },\n                {\n                  \"date\": \"2020-01-03\",\n                  \"y\": 54\n                },\n                {\n                  \"date\": \"2020-01-04\",\n                  \"y\": 35\n                },\n              ]},\n            {\n              \"id\": \"Sunset\",\n              \"color\": \"hsl(45, 70%, 50%)\",\n              \"data\": [\n                {\n                  \"date\": \"2020-01-01\",\n                  \"y\": 40\n                },\n                {\n                  \"date\": \"2020-01-02\",\n                  \"y\": 167\n                },\n                {\n                  \"date\": \"2020-01-03\",\n                  \"y\": 29\n                },\n                {\n                  \"date\": \"2020-01-04\",\n                  \"y\": 111\n                }\n              ]\n            },\n          ]\n        return (<>\n{/* <ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: 'date' }}\n        yScale={{\n            type: 'linear',\n            min: 'auto',\n            max: 'auto',\n            stacked: true,\n            reverse: false\n        }}\n        yFormat=\" >-.2f\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'transportation',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />     */}\n    </>)\n  \n}"]},"metadata":{},"sourceType":"module"}