{"ast":null,"code":"var _jsxFileName = \"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\"; // import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     PointElement,\n//     LineElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//   } from 'chart.js';\n//   import { Line } from 'react-chartjs-2';\n\nimport { ResponsiveLine } from '@nivo/line';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data.data);\n    });\n  }, [props]); // let sunriseStat = yearData.jsonarray.map(function(e) {\n  //     return e[0][1]\n  // })\n  // // push all dates in a array\n  // let dateLabel = [];\n  // useEffect(() => {\n  //     for (let i = 0; i < yearData.length; i++) {\n  //         dateLabel.push({\"date\":yearData?.[i]?.[0],\"time\":yearData?.[i]?.[1]})\n  //     };\n  //     console.log(`dateLabel`,dateLabel)\n  // }, [yearData]);\n  // push all sunrise time in a array \n\n  let sunriseStat = [];\n  useEffect(() => {\n    for (let i = 0; i < yearData.length; i++) {\n      var _yearData$i, _yearData$i2;\n\n      sunriseStat.push({\n        \"x\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i = yearData[i]) === null || _yearData$i === void 0 ? void 0 : _yearData$i[0],\n        \"y\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i2 = yearData[i]) === null || _yearData$i2 === void 0 ? void 0 : _yearData$i2[2]\n      });\n    }\n\n    ;\n    console.log(`sunriseStat`, sunriseStat);\n  }, [yearData]); // push all sunrise time in a array \n\n  let sunsetStat = [];\n  useEffect(() => {\n    for (let i = 0; i < yearData.length; i++) {\n      var _yearData$i3, _yearData$i4;\n\n      sunsetStat.push({\n        \"x\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i3 = yearData[i]) === null || _yearData$i3 === void 0 ? void 0 : _yearData$i3[0],\n        \"y\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i4 = yearData[i]) === null || _yearData$i4 === void 0 ? void 0 : _yearData$i4[2]\n      });\n    }\n\n    ;\n    console.log(`sunsetStat`, sunsetStat);\n  }, [yearData]); // ChartJS.register(\n  //     CategoryScale,\n  //     LinearScale,\n  //     PointElement,\n  //     LineElement,\n  //     Title,\n  //     Tooltip,\n  //     Legend\n  //   );\n  //    const options = {\n  //         responsive: true,\n  //         plugins: {\n  //           legend: {\n  //             position: 'top',\n  //           },\n  //           title: {\n  //             display: true,\n  //             text: 'Sunriseeeee',\n  //           },\n  //         },\n  //         }\n  //     const data = {\n  //     dateLabel,\n  //     datasets: [\n  //         {\n  //         label: 'Sunrise',\n  //         data: sunriseStat,\n  //         borderColor: 'rgb(255, 99, 132)',\n  //         backgroundColor: 'rgba(255, 99, 132, 0.5)',\n  //         },\n  //         {\n  //         label: 'Sunset',\n  //         data: sunsetStat,\n  //         borderColor: 'rgb(53, 162, 235)',\n  //         backgroundColor: 'rgba(53, 162, 235, 0.5)',\n  //         },\n  //     ]\n  // };\n\n  const data = [{\n    \"id\": \"Sunrise\",\n    \"color\": \"hsl(268, 70%, 50%)\",\n    \"data\": sunriseStat\n  }, {\n    \"id\": \"Sunset\",\n    \"color\": \"hsl(331, 70%, 50%)\",\n    \"data\": sunsetStat\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ResponsiveLine, {\n      data: data,\n      margin: {\n        top: 50,\n        right: 110,\n        bottom: 50,\n        left: 60\n      },\n      xScale: {\n        type: \"time\",\n        format: \"%Y-%m-%d\"\n      },\n      xFormat: \"time:%Y-%m-%d\",\n      yScale: {\n        type: \"linear\",\n        min: \"auto\",\n        max: \"auto\",\n        format: \"%Hh%M [%d]\",\n        stacked: false,\n        reverse: false\n      },\n      yFormat: \"time:%Hh%M [%d]\",\n      axisTop: null,\n      axisRight: null,\n      axisLeft: {\n        orient: \"left\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Time\",\n        format: \"%H%M\",\n        legendOffset: -40,\n        legendPosition: \"middle\"\n      },\n      axisBottom: {\n        format: \"%x\",\n        //tickValues: \"every 2 days\",\n        // tickRotation: -90,\n        legend: \"time scale\",\n        legendOffset: -12\n      },\n      colors: {\n        scheme: \"nivo\"\n      },\n      pointSize: 10,\n      pointColor: {\n        theme: \"background\"\n      },\n      pointBorderWidth: 2,\n      pointBorderColor: {\n        from: \"serieColor\"\n      },\n      pointLabel: \"y\",\n      pointLabelYOffset: -12,\n      useMesh: true,\n      legends: [{\n        anchor: \"bottom-right\",\n        direction: \"column\",\n        justify: false,\n        translateX: 100,\n        translateY: 0,\n        itemsSpacing: 0,\n        itemDirection: \"left-to-right\",\n        itemWidth: 80,\n        itemHeight: 20,\n        itemOpacity: 0.75,\n        symbolSize: 12,\n        symbolShape: \"circle\",\n        symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n        effects: [{\n          on: \"hover\",\n          style: {\n            itemBackground: \"rgba(0, 0, 0, .03)\",\n            itemOpacity: 1\n          }\n        }]\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} //        xScale={{\n//     type: \"time\",\n//     format: \"%Y-%m-%d\",\n//     precision: 'day'\n//   }}\n//   xFormat=\"time:%Y-%m-%d\"\n//   yScale={{\n//     type: \"linear\",\n//     min: \"auto\",\n//     max: \"auto\",\n//     format: \"%Hh%M [%d]\",\n//     stacked: false,\n//     reverse: false,\n//   }}\n//   yFormat=\"time:%Hh%M [%d]\"\n\n_s(SearchSunriseSunset, \"8g/7MloqCINGyLkdqCOlzMVrSdI=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","ResponsiveLine","SearchSunriseSunset","props","yearData","setYearData","year","Object","values","API","get","mode","then","response","data","sunriseStat","i","length","push","console","log","sunsetStat","top","right","bottom","left","type","format","min","max","stacked","reverse","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","scheme","theme","from","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n// import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     PointElement,\n//     LineElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//   } from 'chart.js';\n//   import { Line } from 'react-chartjs-2';\nimport { ResponsiveLine } from '@nivo/line'\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        }, [props]);\n\n        // let sunriseStat = yearData.jsonarray.map(function(e) {\n        //     return e[0][1]\n        // })\n\n        // // push all dates in a array\n        // let dateLabel = [];\n        // useEffect(() => {\n        //     for (let i = 0; i < yearData.length; i++) {\n        //         dateLabel.push({\"date\":yearData?.[i]?.[0],\"time\":yearData?.[i]?.[1]})\n        //     };\n        //     console.log(`dateLabel`,dateLabel)\n        // }, [yearData]);\n            \n        // push all sunrise time in a array \n        let sunriseStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunriseStat.push({\"x\":yearData?.[i]?.[0],\"y\":yearData?.[i]?.[2]})\n            };\n                console.log(`sunriseStat`,sunriseStat)\n                \n        }, [yearData]);\n\n        // push all sunrise time in a array \n        let sunsetStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunsetStat.push({\"x\":yearData?.[i]?.[0],\"y\":yearData?.[i]?.[2]})\n            };\n            console.log(`sunsetStat`,sunsetStat)\n        }, [yearData]);\n\n\n        // ChartJS.register(\n        //     CategoryScale,\n        //     LinearScale,\n        //     PointElement,\n        //     LineElement,\n        //     Title,\n        //     Tooltip,\n        //     Legend\n        //   );\n\n    //    const options = {\n    //         responsive: true,\n    //         plugins: {\n    //           legend: {\n    //             position: 'top',\n    //           },\n    //           title: {\n    //             display: true,\n    //             text: 'Sunriseeeee',\n    //           },\n    //         },\n    //         }\n        \n\n\n    //     const data = {\n    //     dateLabel,\n    //     datasets: [\n    //         {\n    //         label: 'Sunrise',\n    //         data: sunriseStat,\n    //         borderColor: 'rgb(255, 99, 132)',\n    //         backgroundColor: 'rgba(255, 99, 132, 0.5)',\n    //         },\n    //         {\n    //         label: 'Sunset',\n    //         data: sunsetStat,\n    //         borderColor: 'rgb(53, 162, 235)',\n    //         backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    //         },\n    //     ]\n    // };\n\n\n         const data = [\n                {\n                  \"id\": \"Sunrise\",\n                  \"color\": \"hsl(268, 70%, 50%)\",\n                  \"data\": sunriseStat\n                },\n                {\n                    \"id\": \"Sunset\",\n                    \"color\": \"hsl(331, 70%, 50%)\",\n                    \"data\": sunsetStat\n                  },\n            ]\n\n\n        return (\n        <>\n            <ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n            type: \"time\",\n            format: \"%Y-%m-%d\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n            type: \"linear\",\n            min: \"auto\",\n            max: \"auto\",\n            format: \"%Hh%M [%d]\",\n            stacked: false,\n            reverse: false,\n        }}\n        yFormat=\"time:%Hh%M [%d]\"\n        axisTop={null}\n        axisRight={null}\n        axisLeft={{\n          orient: \"left\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"Time\",\n          format:\"%H%M\",\n          legendOffset: -40,\n          legendPosition: \"middle\"\n        }}\n        axisBottom={{\n          format: \"%x\",\n          //tickValues: \"every 2 days\",\n          // tickRotation: -90,\n          legend: \"time scale\",\n          legendOffset: -12\n        }}\n        colors={{ scheme: \"nivo\" }}\n        pointSize={10}\n        pointColor={{ theme: \"background\" }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: \"serieColor\" }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n          {\n            anchor: \"bottom-right\",\n            direction: \"column\",\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: \"left-to-right\",\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n    />   \n        </>)\n  \n}\n\n//        xScale={{\n//     type: \"time\",\n//     format: \"%Y-%m-%d\",\n//     precision: 'day'\n//   }}\n//   xFormat=\"time:%Y-%m-%d\"\n//   yScale={{\n//     type: \"linear\",\n//     min: \"auto\",\n//     max: \"auto\",\n//     format: \"%Hh%M [%d]\",\n//     stacked: false,\n//     reverse: false,\n//   }}\n//   yFormat=\"time:%Hh%M [%d]\""]},"metadata":{},"sourceType":"module"}