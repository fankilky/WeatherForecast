{"ast":null,"code":"var _jsxFileName = \"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data.data);\n    });\n  }, [props]); // let sunriseStat = yearData.jsonarray.map(function(e) {\n  //     return e[0][1]\n  // })\n  // console.log(`sunriseStat`,sunriseStat)\n  // useEffect(() => {\n  //     for(var i = 0; i < yearData.length; i++) {\n  //         var obj = {}; // <---- Move declaration inside loop\n  //         obj['date'] = yearData[i];\n  //         yearData.push(obj);\n  //         console.log(`obj`,obj);\n  //     }\n  // }, [yearData]);\n  // let sunriseData = yearData.data.map(e => ({\n  //     data: e,\n  //     time: \"label\"\n  // }));\n  // console.log(`sunriseData`,sunriseData);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunriseeeee'\n      }\n    }\n  };\n  console.log(`yearDatafield`, yearData.fields);\n  const data = {// labels,\n    // datasets: [\n    //     {\n    //     label: 'Dataset 1',\n    //     data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n    //     borderColor: 'rgb(255, 99, 132)',\n    //     backgroundColor: 'rgba(255, 99, 132, 0.5)',\n    //     },\n    //     {\n    //     label: 'Dataset 2',\n    //     data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n    //     borderColor: 'rgb(53, 162, 235)',\n    //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    //     },\n    // ],\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SearchSunriseSunset, \"M/M4V4aROy+oDgwdMrMedD/vvKs=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","Line","SearchSunriseSunset","props","yearData","setYearData","year","Object","values","API","get","mode","then","response","data","options","responsive","plugins","legend","position","title","display","text","console","log","fields"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,iBAArB;;;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcL,KAAd,CAAX;AACA,QAAIM,GAAG,GAAI,kFAAiFH,IAAK,eAAjG;AACIR,IAAAA,KAAK,CAACY,GAAN,CAAUD,GAAV,EAAe;AAACE,MAAAA,IAAI,EAAC;AAAN,KAAf,EAA8BC,IAA9B,CAAoCC,QAAD,IAAc;AAC7CR,MAAAA,WAAW,CAACQ,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAX;AACH,KAFD;AAGH,GANI,EAMF,CAACX,KAAD,CANE,CAAT,CAH+C,CAW3C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAED,QAAMY,OAAO,GAAG;AACXC,IAAAA,UAAU,EAAE,IADD;AAEXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OADD;AAIPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE;AAFD;AAJA;AAFE,GAAhB;AAaGC,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAb,EAA4BpB,QAAQ,CAACqB,MAArC;AACF,QAAMX,IAAI,GAAG,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfa,GAAb;AAiBA,sBACA;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEC,OAAf;AAAwB,MAAA,IAAI,EAAED;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ,mBADA;AAKP;;GArEuBZ,mB;;KAAAA,mB","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Line } from 'react-chartjs-2';\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        }, [props]);\n\n        // let sunriseStat = yearData.jsonarray.map(function(e) {\n        //     return e[0][1]\n        // })\n        // console.log(`sunriseStat`,sunriseStat)\n\n        // useEffect(() => {\n        //     for(var i = 0; i < yearData.length; i++) {\n        //         var obj = {}; // <---- Move declaration inside loop\n            \n        //         obj['date'] = yearData[i];\n        //         yearData.push(obj);\n        //         console.log(`obj`,obj);\n        //     }\n        // }, [yearData]);\n            \n\n        // let sunriseData = yearData.data.map(e => ({\n        //     data: e,\n        //     time: \"label\"\n        // }));\n        // console.log(`sunriseData`,sunriseData);\n\n       const options = {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'top',\n              },\n              title: {\n                display: true,\n                text: 'Sunriseeeee',\n              },\n            },\n          }\n\n          console.log(`yearDatafield`,yearData.fields)\n        const data = {\n        // labels,\n        // datasets: [\n        //     {\n        //     label: 'Dataset 1',\n        //     data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n        //     borderColor: 'rgb(255, 99, 132)',\n        //     backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        //     },\n        //     {\n        //     label: 'Dataset 2',\n        //     data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n        //     borderColor: 'rgb(53, 162, 235)',\n        //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        //     },\n        // ],\n        };\n        return (\n        <>\n            <Line options={options} data={data} />    \n        </>)\n  \n}"]},"metadata":{},"sourceType":"module"}