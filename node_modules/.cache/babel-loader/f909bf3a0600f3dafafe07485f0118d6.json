{"ast":null,"code":"var _jsxFileName = \"/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\"; // import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     PointElement,\n//     LineElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//   } from 'chart.js';\n//   import { Line } from 'react-chartjs-2';\n\nimport { ResponsiveLine } from '@nivo/line';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchSunriseSunset(props) {\n  _s();\n\n  const [yearData, setYearData] = useState(\"\");\n  useEffect(() => {\n    let year = Object.values(props);\n    let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n    axios.get(API, {\n      mode: 'cors'\n    }).then(response => {\n      setYearData(response.data.data);\n    });\n  }, [props]); // let sunriseStat = yearData.jsonarray.map(function(e) {\n  //     return e[0][1]\n  // })\n\n  console.log(`sunriseStat`, yearData); // push all dates in a array\n\n  let dateLabel = [];\n  useEffect(() => {\n    for (let i = 0; i < yearData.length; i++) {\n      var _yearData$i, _yearData$i2;\n\n      dateLabel.push({\n        \"date\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i = yearData[i]) === null || _yearData$i === void 0 ? void 0 : _yearData$i[0],\n        \"time\": yearData === null || yearData === void 0 ? void 0 : (_yearData$i2 = yearData[i]) === null || _yearData$i2 === void 0 ? void 0 : _yearData$i2[1]\n      });\n    }\n\n    ;\n    console.log(`dateLabel`, dateLabel);\n  }, [yearData]); // push all sunrise time in a array \n\n  let sunriseStat = [];\n  useEffect(() => {\n    for (let i = 0; i < yearData.length; i++) {\n      var _yearData$i3;\n\n      sunriseStat.push(yearData === null || yearData === void 0 ? void 0 : (_yearData$i3 = yearData[i]) === null || _yearData$i3 === void 0 ? void 0 : _yearData$i3[1]);\n    }\n\n    ;\n    console.log(`sunriseStat`, sunriseStat);\n  }, [yearData]); // push all sunrise time in a array \n\n  let sunsetStat = [];\n  useEffect(() => {\n    for (let i = 0; i < yearData.length; i++) {\n      var _yearData$i4;\n\n      sunsetStat.push(yearData === null || yearData === void 0 ? void 0 : (_yearData$i4 = yearData[i]) === null || _yearData$i4 === void 0 ? void 0 : _yearData$i4[3]);\n    }\n\n    ;\n    console.log(`sunsetStat`, sunsetStat);\n  }, [yearData]); // ChartJS.register(\n  //     CategoryScale,\n  //     LinearScale,\n  //     PointElement,\n  //     LineElement,\n  //     Title,\n  //     Tooltip,\n  //     Legend\n  //   );\n  //    const options = {\n  //         responsive: true,\n  //         plugins: {\n  //           legend: {\n  //             position: 'top',\n  //           },\n  //           title: {\n  //             display: true,\n  //             text: 'Sunriseeeee',\n  //           },\n  //         },\n  //         }\n  //     const data = {\n  //     dateLabel,\n  //     datasets: [\n  //         {\n  //         label: 'Sunrise',\n  //         data: sunriseStat,\n  //         borderColor: 'rgb(255, 99, 132)',\n  //         backgroundColor: 'rgba(255, 99, 132, 0.5)',\n  //         },\n  //         {\n  //         label: 'Sunset',\n  //         data: sunsetStat,\n  //         borderColor: 'rgb(53, 162, 235)',\n  //         backgroundColor: 'rgba(53, 162, 235, 0.5)',\n  //         },\n  //     ]\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SearchSunriseSunset, \"jKHVT+aYE5rIxqr4kyANtElw+wQ=\");\n\n_c = SearchSunriseSunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchSunriseSunset\");","map":{"version":3,"sources":["/Users/likingyan/Documents/Butler/ButlerWeatherForecast/src/pages/components/SearchSunriseSunset.js"],"names":["axios","useState","useEffect","ResponsiveLine","SearchSunriseSunset","props","yearData","setYearData","year","Object","values","API","get","mode","then","response","data","console","log","dateLabel","i","length","push","sunriseStat","sunsetStat","options"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n// import {\n//     Chart as ChartJS,\n//     CategoryScale,\n//     LinearScale,\n//     PointElement,\n//     LineElement,\n//     Title,\n//     Tooltip,\n//     Legend,\n//   } from 'chart.js';\n//   import { Line } from 'react-chartjs-2';\nimport { ResponsiveLine } from '@nivo/line'\n\nexport default function SearchSunriseSunset(props) {\n    const [yearData, setYearData] = useState(\"\")\n\n    useEffect(() => {\n        let year = Object.values(props);\n        let API = `https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=SRS&year=${year}&rformat=json`;\n            axios.get(API, {mode:'cors'}).then((response) => {\n                setYearData(response.data.data);\n            });\n        }, [props]);\n\n        // let sunriseStat = yearData.jsonarray.map(function(e) {\n        //     return e[0][1]\n        // })\n        console.log(`sunriseStat`,yearData)\n\n        // push all dates in a array\n        let dateLabel = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                dateLabel.push({\"date\":yearData?.[i]?.[0],\"time\":yearData?.[i]?.[1]})\n            };\n            console.log(`dateLabel`,dateLabel)\n        }, [yearData]);\n            \n        // push all sunrise time in a array \n        let sunriseStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunriseStat.push(yearData?.[i]?.[1])\n            };\n            console.log(`sunriseStat`,sunriseStat)\n        }, [yearData]);\n\n        // push all sunrise time in a array \n        let sunsetStat = [];\n        useEffect(() => {\n            for (let i = 0; i < yearData.length; i++) {\n                sunsetStat.push(yearData?.[i]?.[3])\n            };\n            console.log(`sunsetStat`,sunsetStat)\n        }, [yearData]);\n\n\n        // ChartJS.register(\n        //     CategoryScale,\n        //     LinearScale,\n        //     PointElement,\n        //     LineElement,\n        //     Title,\n        //     Tooltip,\n        //     Legend\n        //   );\n\n    //    const options = {\n    //         responsive: true,\n    //         plugins: {\n    //           legend: {\n    //             position: 'top',\n    //           },\n    //           title: {\n    //             display: true,\n    //             text: 'Sunriseeeee',\n    //           },\n    //         },\n    //         }\n        \n\n\n    //     const data = {\n    //     dateLabel,\n    //     datasets: [\n    //         {\n    //         label: 'Sunrise',\n    //         data: sunriseStat,\n    //         borderColor: 'rgb(255, 99, 132)',\n    //         backgroundColor: 'rgba(255, 99, 132, 0.5)',\n    //         },\n    //         {\n    //         label: 'Sunset',\n    //         data: sunsetStat,\n    //         borderColor: 'rgb(53, 162, 235)',\n    //         backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    //         },\n    //     ]\n    // };\n        return (\n        <>\n            <Line options={options} data={data} />    \n        </>)\n  \n}"]},"metadata":{},"sourceType":"module"}